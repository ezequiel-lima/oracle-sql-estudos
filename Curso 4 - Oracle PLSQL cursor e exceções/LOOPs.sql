SELECT c.* FROM CLIENTE c;

BEGIN
	ATUALIZAR_SEG_MERCADO(1, 4);
	ATUALIZAR_SEG_MERCADO(2, 4);
	ATUALIZAR_SEG_MERCADO(3, 4);
	ATUALIZAR_SEG_MERCADO(4, 4);
	ATUALIZAR_SEG_MERCADO(5, 4);
	ATUALIZAR_SEG_MERCADO(6, 4);
	ATUALIZAR_SEG_MERCADO(7, 4);
	ATUALIZAR_SEG_MERCADO(8, 4);
	ATUALIZAR_SEG_MERCADO(9, 4);
END;

DECLARE
	v_SEGMERCADO CLIENTE.SEGMERCADO_ID%TYPE := 2;
	v_ID CLIENTE.ID%TYPE := 1;
BEGIN
	ATUALIZAR_SEG_MERCADO(v_ID, v_SEGMERCADO);
	v_ID := v_ID + 1;
	ATUALIZAR_SEG_MERCADO(v_ID, v_SEGMERCADO);
	v_ID := v_ID + 1;
	ATUALIZAR_SEG_MERCADO(v_ID, v_SEGMERCADO);
	v_ID := v_ID + 1;
	ATUALIZAR_SEG_MERCADO(v_ID, v_SEGMERCADO);
	v_ID := v_ID + 1;
	ATUALIZAR_SEG_MERCADO(v_ID, v_SEGMERCADO);
	v_ID := v_ID + 1;
	ATUALIZAR_SEG_MERCADO(v_ID, v_SEGMERCADO);
	v_ID := v_ID + 1;
	ATUALIZAR_SEG_MERCADO(v_ID, v_SEGMERCADO);
	v_ID := v_ID + 1;
	ATUALIZAR_SEG_MERCADO(v_ID, v_SEGMERCADO);
	v_ID := v_ID + 1;
	ATUALIZAR_SEG_MERCADO(v_ID, v_SEGMERCADO);
	v_ID := v_ID + 1;
END;

/* LOOP-END LOOP, é equivalente ao DoWhile*/

DECLARE
    v_SEGMERCADO CLIENTE.SEGMERCADO_ID%type := 3;
    v_ID CLIENTE.ID%type := 1;
BEGIN
    LOOP
        ATUALIZAR_SEG_MERCADO(v_ID, v_SEGMERCADO);
        v_ID := v_ID + 1;
        EXIT WHEN v_ID > 9;
    END LOOP;
END;

BEGIN 
	INCLUIR_CLIENTE(12, 'FARMACIA GROS', '6748734657598', 1, 60000);
END;

DECLARE
    v_SEGMERCADO CLIENTE.SEGMERCADO_ID%type := 4;
    v_ID CLIENTE.ID%type := 1;
    v_NUMCLI INTEGER;
BEGIN
	SELECT COUNT(*) INTO v_NUMCLI FROM CLIENTE;
    LOOP
        ATUALIZAR_SEG_MERCADO(v_ID, v_SEGMERCADO);
        v_ID := v_ID + 1;
        EXIT WHEN v_ID > v_NUMCLI;
    END LOOP;
END;

/* ESTRUTURA FOR */
SELECT c.* FROM CLIENTE c;

DECLARE
    v_SEGMERCADO CLIENTE.SEGMERCADO_ID%type := 3;
    v_NUMCLI INTEGER;
BEGIN
    SELECT COUNT(*) INTO v_NUMCLI FROM CLIENTE;
    FOR v_ID IN 1..v_NUMCLI LOOP /* de 1 até o valor da variavel v_NUMCLI */
        ATUALIZAR_SEG_MERCADO(v_ID, v_SEGMERCADO);
    END LOOP;
END;

DECLARE
	v_SEGMERCADO CLIENTE.SEGMERCADO_ID%type :=1;
	v_NUMCLI INTEGER;
BEGIN
	SELECT COUNT (*) INTO v_NUMCLI FROM CLIENTE;
	    FOR v_ID IN 1..v_NUMCLI LOOP
	        ATUALIZAR_SEG_MERCADO (p_SEGMERCADO_ID => v_SEGMERCADO, p_ID =>  v_ID);
	    END LOOP;
END;


DECLARE
    v_SEGMERCADO CLIENTE.SEGMERCADO_ID%type := 2;
    v_ID CLIENTE.ID%type := 1;
    v_NUMCLI INTEGER;
BEGIN
    SELECT COUNT(*) INTO v_NUMCLI FROM CLIENTE;
    LOOP
        IF v_ID <= v_NUMCLI THEN
            ATUALIZAR_SEG_MERCADO(v_ID, v_SEGMERCADO);
            v_ID := v_ID + 1;
        ELSE
            EXIT;
        END IF;
    END LOOP;
END;


CREATE OR REPLACE PROCEDURE SOMA_VENDAS 
(p_VENDA_LIMITE IN produto_venda_exercicio.valor_total%type, p_ID_RETORNO OUT produto_venda_exercicio.id%type)
IS
   v_ID produto_venda_exercicio.id%type := 1;
   v_VALOR_TOTAL produto_venda_exercicio.valor_total%type;
   v_VENDA_TOTAL produto_venda_exercicio.valor_total%type := 0;
BEGIN
   LOOP
      SELECT VALOR_TOTAL INTO v_VALOR_TOTAL FROM PRODUTO_VENDA_EXERCICIO WHERE ID = v_ID;
      v_VENDA_TOTAL := v_VENDA_TOTAL + v_VALOR_TOTAL;
      IF v_VENDA_TOTAL >= p_VENDA_LIMITE THEN
         EXIT;
      END IF;
      v_ID := v_ID + 1;
   END LOOP;
   p_ID_RETORNO := v_ID;
END;


DECLARE 
   v_SEGMERCADO CLIENTE.SEGMERCADO_ID%type := 3;
     v_ID CLIENTE.ID%type :=2;
     v_NUMCLI INTEGER;
BEGIN
   SELECT COUNT(*) INTO v_NUMCLI FROM CLIENTE;
     WHILE v_ID <= v_NUMCLI LOOP
        ATUALIZAR_SEG_MERCADO (v_ID,v_SEGMERCADO);
            v_ID := v_ID + 1; 
     END LOOP;
END;
